;;

;; Dot
(defwidget dot []
  (button
    :class "con"
    ""
    )
  )


;; Launcher button


(defvar launcher_hover false)
(defwidget launcher []
  (eventbox
    ;;:timeout "0ms"
    :cursor "pointer"
    :onclick "bash ~/.config/rofi/launch.sh &"
    :onhover "eww update launcher_hover=true"
    :onhoverlost "eww update launcher_hover=false"
    :width 80
    (box
      :class "button-box"
      (box
        :class "launcher-hover"
        :class {launcher_hover ? "launcher launcher-hover" : "launcher"}
        ;;:style {launcher_hover ? "background-color: #0f0f0f" : ""}
        ;;:timeout "100ms"
        ;;:onclick "bash ~/.config/rofi/launch.sh &"

        ;;:onclick "~/.config/eww/scripts/toggleSystemMenu.sh"
        "";;"𝄞"
      )
    )
  )
)

;; Workspaces
;; extra icons:  
(deflisten workspace "./scripts/workspaces_f")
(defwidget workspaces_f []
  (eventbox
		;;:onscroll "echo {} | sed -e \"s/up/-1/g\" -e \"s/down/+1/g\" | xargs hyprctl dispatch workspace"
		(box
			:class "workspaces"
			:spacing 0
            ;;:height 100

		  (for ws in workspace
            (eventbox
              :cursor "pointer"

		    (button

            ;;:vexpand "true"
                    ;;:valign "start" 
					:onclick "hyprctl dispatch workspace ${ws.number}"
					:class "ws-icon ${ws.color == "occupied" ? "occupied" : "empty"} ${ws.color == "current" ? "current" : ""}"
                    ;; comment the next line out and change style in scss / this also allows for hover color change
			      	;;:style "color: ${ws.color};"
					;;:tooltip {ws.tooltip}
                    (label
					  :text "" ;;${ws.color == "current" ? "❐" : ""}"
                      :yalign 0.6  ;; fix for empty dots wrong valign?
                     )


                    ))))))

;; ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"


;; Battery

(defwidget battery []
    (label
        :text "${EWW_BATTERY.BAT0.capacity}%"
    )
)

;; Time

(defpoll time 
    :interval "10s"
    "date '+%B %e   %l:%M %P'"
)




;; Center widgets

(defvar calendarOpen false)
(defvar time_hover false)
(defwidget time []
  (eventbox
      :cursor "pointer"
      :onclick {calendarOpen ? "eww close calendar; eww update calendarOpen=false" : "eww open calendar; eww update calendarOpen=true"}
      :onhover "eww update time_hover=true"
      :onhoverlost "eww update time_hover=false"
    (box
      :class "button-box"
      (label
        :class {time_hover ? "time-button time-button-hover" : "time-button"} 
        :text "${time}"
      )
    )
  )
)

(defwidget center []
    ;;(eventbox
    ;;    :cursor "pointer"
    ;;    :onclick {calendarOpen ? "eww close calendar; eww update calendarOpen=false" : "eww open calendar; eww update calendarOpen=true"}
    ;;    :halign "center"
        (time)
    ;;)
)


;; Volume

;;(defpoll volume 
;;  :interval "1s"
;;  "scripts/volume.sh"
;;)
(deflisten volumeL "./scripts/checkVolume.sh")
;;(defvar mute true)
(deflisten microphone "./scripts/checkMicrophone.sh")

;;(deflisten mute {volumeL.mute})


;; Temperature
(defpoll temp
    :interval "2s"
    "scripts/getTemp.sh"
)

;; Network
(defpoll wifi
    :interval "2s"
    "scripts/network.sh"
)

(defpoll battery
    :interval "1s"
    "scripts/battery.sh"
)

(defpoll memory
  :interval "1s"
  "scripts/mem.sh"
)

(defpoll weather_info
  :interval "10s"
  "scripts/weather.sh"
)

(defpoll user
  :interval "24h"
  "echo $USER"
)





;; WARNING... Could cause eww to freeze on reload
(defwidget weather []
  (label
    :class "weather"
    ;;:text "${weather_info}"
    :text "weather n/a"
  )
)

(defwidget sprite []
  (image
    :path "/home/ghost/Downloads/shinx_28px.gif"
    :image-width 20
    :image-height 20
  )
)

(defwidget cpu []
  (box
    :space-evenly false
    (label
      :class "icon cpu-icon"
      :text " "
    )
    (label
      :text "${temp}°C | ${round(EWW_CPU.avg, 0)}%"
      :class "icon"
      ;;:halign "end"       ;; Use this to fix dumbass spacing issue
      :width 0
    )
  )
) 

(defwidget cpu_temp []
  (label
    :text " ${temp}°C"
    :class "icon"
    ;;:halign "end"       ;; Use this to fix dumbass spacing issue
    :width 0
  )
)

(defwidget cpu_usage []
  (label
    :text " ${round(EWW_CPU.avg, 0)}%"
    :class "icon"
    ;;:halign "end"       ;; Use this to fix dumbass spacing issue
    :width 0
  )
)

(defwidget memory []
  (box 
    :halign "center"
    :space-evenly false
    (label
      :class "icon mem-icon"
      :text " " 
    )
    (label
      :text "${memory}%"
      :class "icon"
    )
  )
) 

(defwidget battery []
  (box
    (label
      :text "${EWW_BATTERY.BAT0.capacity}%"
    )
    (overlay
      (label
        :class "battery icon "
        :text "${battery.bg}"
      )
      (label
        :class "battery-bg icon ${battery.critical == "yes" ? "battery-critical" : ""}"
        :text "${battery.icon}"
      )
    )
  )
)


(defwidget wifi []
  (overlay
    (label
      :class "wifi wifi-bg icon"
      :text "${wifi.bg}"
      ;;:halign "end"       ;; Use this to fix dumbass spacing issue
    )
    (label
      :class "wifi icon"
      :text "${wifi.icon}"
      ;;:halign "end"       ;; Use this to fix dumbass spacing issue
    )
  )
)

(defwidget volume []
  (overlay
    (label
      :text "${volumeL.bg}"
      :class "volume-bg"
      ;;:halign "end"       ;; Use this to fix dumbass spacing issue
      :width 20
    )

    (label
      :text "${volumeL.icon}"
      :class {volumeL.mute == "true" ? "volume off" : "volume"}
      ;;:halign "end"       ;; Use this to fix dumbass spacing issue
      :width 20
    )
  )
)

(defpoll bluetoothPower 
  :interval "1s"
  "scripts/getBluetooth.sh"
)

(defwidget bluetooth []
  ;; bluetooth power on/off
  (label
    :width 16
    :class {bluetoothPower ? "bluetooth-label" : "bluetooth-label bluetooth-off"}
    :text {bluetoothPower ? "" : ""}
  )
)

(defvar system_menu_button_hover false)

;; Right widgets
(defwidget right []
    (box
        :halign "end"
        :space-evenly false
        :spacing 10
      (box
        :spacing 20
        :halign "end"
        :space-evenly false
        ;;(sprite)
        ;;(weather)
        (cpu)
        (memory)
        (bluetooth)
        (wifi)
        (battery)
        (volume)
      )
      (eventbox
        :cursor "pointer"
        :onclick "scripts/toggleSystemMenu.sh"
        :onhover "eww update system_menu_button_hover=true"
        :onhoverlost "eww update system_menu_button_hover=false"
        :width 80
        (box
          :class "button-box"
          (button
              ;;:class "con"
              :class {system_menu_button_hover ? "con con-hover" : "con"}
              ;;:timeout "0.05s"
              :onclick "scripts/toggleSystemMenu.sh"
              "";;""
          )
        )
      )
    )
)



;; class "${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"





;; Left widgets

(deflisten window :initial "..." "bash ~/.config/eww/scripts/get-window-title")
(defwidget left []
    (box 
        :halign "start"
        :space-evenly false
        (launcher)
        (workspaces_f)
        ;;(workspaces_test :halign "center" :vexpand true :hexpand false :orientation "h")
        (label 
          :limit-width 30
          :class "window-name"
          :text "${window}")
    )
)






;; Bar

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :focusable false
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "101%"
                      :height 42
                      :anchor "top center")
  :exclusive true
     
	(centerbox :class "container" ;;:space-evenly "false"
        :orientation "h"
		(left)
        (center)	
        (right)
    )
)

(defwindow bar_external
  :monitor 1
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      ;; 4k monitor
                      :width 3860
                      :height 42
                      :anchor "top center")
  :exclusive true
     
	(centerbox :class "container" ;;:space-evenly "false"
        :orientation "h"
		(left)
        (center)	
        (right)
    )
)

;; Calendar

(defwindow calendar
  :monitor 0 
  :windowtype "normal"
  :geometry (geometry :x "0%"
                      :y "1%"
                      ;;:width "20%"
                      ;;:height "24%"
                      :anchor "top center")
  (box
  
    :class "calendar-widget"
    (calendar
    )
  )

)

(defpoll brightness 
  :interval "200ms"
  "light -G"
)

;;(defpoll get_theme_light :interval "200ms" "cat theme_light")

(defvar power_reveal false)
(defvar night_light false)
(defvar theme_light false)
(defvar system_menu_open true)
(defvar wifi_menu_open false)

(defvar ssid "")
(defvar wifiFocused false)

(defvar wifiClickd true)

;; System menu

(defwidget menu_button []
  (eventbox 
    :class "menu-button"
    ;;name
    (children)
  )
)



;; Module imports
(include "modules/network.yuck")
(include "modules/bluetooth.yuck")
(include "modules/nightlight.yuck")
(include "modules/theme.yuck")
(include "modules/volume.yuck")
(include "modules/microphone.yuck")
(include "modules/brightness.yuck")
(include "modules/system_stats.yuck")
(include "modules/battery.yuck")
(include "modules/display.yuck")
(include "modules/keyboard.yuck")

(defpoll wifi_scan
  :interval "5s"
  "./scripts/getWifiNetworks.sh"
)
(defwidget wifi_list []
  (box
    :orientation "v"
    :space-evenly false
    (label
      :text "${ssid}"
    )
    (scroll
      :height 240
      (box
        :orientation "v"
        :spacing 0
        :space-evenly false
        (for network in wifi_scan
          (box
            :orientation "v"
            :space-evenly false
            (eventbox
              :cursor "pointer"
              :class "wifi-network"
              ;;:height 20
              ;;:halign "start"
              ;;:hexpand true
              ;;:height 60
              ;;:width 400
              :onclick {ssid == "" ? "eww update ssid='${network.ssid}'" : "eww update ssid=''"}
              (box
                ;;:class ""
                :space-evenly false
                :class "wifi-network-label"
                :spacing 10 
                (overlay
                  (label
                    :class "icon wifi-bg"
                    :text "${network.icon_bg}"
                    ;;:halign "end"       ;; Use this to fix dumbass spacing issue
                  )
                  (label
                    :class "icon"
                    :text "${network.icon}"
                    ;;:halign "end"       ;; Use this to fix dumbass spacing issue
                  )
                )
                (label
                  :text "${network.ssid}"
                )
                (label
                  :text "${network.status}"
                )
              )
            )
            (revealer
              :reveal {network.ssid == ssid ? true : false}
              :height 0
              :transition "slidedown"
              :duration "100ms"
              ;;:visible false 
              (box
                :class "password-container"
                :orientation "h"
                :space-evenly false
                (label
                  :text "Password:  "
                )
                (input
                  :hexpand true
                  :class "password-entry"
                  :value ""
                  :password true
                  :onaccept "nmcli dev wifi connect ${ssid} password {}"
                )
              )
            )
          )
        )
      )
    )
  )
)

(defwidget system_menu_items []
  (box
    :class "system-menu-container"
    :orientation "v"
    :spacing 20
    :space-evenly false ;; Affects size of all child elements
    ;; Sliders
    (system_stats)
    (battery_stats)
    (box
      :class "menu-widget sliders"
      :orientation "v"
      :spacing 20
      (volume_slider)
      (microphone_slider)
      (brightness_slider)
    )
    ;; Menu button row 1
    (box
      :orientation "h"
      :spacing 10
      ;;:space-evenly false
      (network_button)
      (box
        ;;:space-evenly false
        :spacing 10
        ;;:width "100%"
        (bluetooth_button)
        (nightlight_button)
      )
    )



    ;; Menu buttons row 2
    (box
      :orientation "h"
      :spacing 10
      ;;:space-evenly false
      (box
        :spacing 10
        (keyboard_button)
        (theme_button)
      )
      (display)
    )

    ;; Bottom row
    (centerbox
      :space-evenly false
      :class "menu-widget bottom"
      :orientation "h"
      :height 80
      (box
        :orientation "h"
        :space-evenly false
        :spacing 12
        (box
          :class "pfp"
          ;;:width 60
          ;;:height 60
        )
        (label
          :halign "end"
          :text "${user}\\n@scythe" 
          :style "font-size: 16px;"
        )
      )
      ;;(eventbox
      ;; :onhover "eww update power_reveal=true"
      ;;  :onhoverlost "eww update power_reveal=false"
      ;;  "ababa"
      ;;)
      ;; could create toggle with "eww state" to get variable and then run a script to change value
      (label :text "") 
      (box
        :space-evenly false
        :spacing 4
        :halign "end" 
        :class "bottom-row"
        (eventbox
          ;;:onhover "eww update power_reveal=true"
          ;;:onhoverlost "eww update power_reveal=false"
          (revealer
            :reveal {power_reveal}
            :transition "slideleft"
            :duration "100ms"
            (box
              :space-evenly false
              :spacing 4
              :style "padding: 6px;"
              (eventbox
                :class "power-button power-off"
                :halign "end"
                :cursor "pointer"
                :width 44
                :height 44
                "⏼"
              )
              (eventbox
                :class "power-button lock"
                :halign "end"
                :cursor "pointer"
                :width 44
                :height 44
                :onclick "~/.scripts/swaylockenv.sh"
                ""
              )
              (eventbox
                :class "power-button restart"
                :halign "end"
                :cursor "pointer"
                :width 44
                :height 44
                (label
                  :text ""
                )
              )
              "｜"
            )
          )
        )
        (eventbox
          :class "power button"
          :halign "end"
          :cursor "pointer"
          ;;:onhover "eww update power_reveal=true"
          :onclick {power_reveal ? "eww update power_reveal=false" : "eww update power_reveal=true"}
          ;;:onhoverlost "eww update power_reveal=false"
          ;;:width 20
          ;;:height 20
          "⏻"
        )
      )
    )
  )
)


(defwindow system_menu
  :monitor 0
  :windowtype "normal"
  :focusable false
  :geometry (geometry :x "1%"
                      :y "1%"
                      :width "260px"
                      :height "0%"
                      :anchor "top right")
  ;;(literal
  ;;  :content "${system_menu_open ? '(system_menu_items)' : '(wifi_list)'}"
  ;;)
  (eventbox
    ;;:onhover 
    ;;:onhoverlost
    (system_menu_items)
  )
)


(defwidget back_button []
  (eventbox
  :cursor "pointer"
    (button
      :class "back-button"
      :timeout "0.05s"
      :onclick "scripts/toggleWifiMenu.sh"
      :height 48
      :width 48
      "◁"
    )
  )
)

(defwindow wifi_menu
  :monitor 0
  :windowtype "normal"
  ;;:focusable {wifiFocused ? true : false}
  ;;:focusable true
  :geometry (geometry :x "1%"
                      :y "1%"
                      :width "22%"
                      :height "400px"
                      :anchor "top right")
  (box
    :orientation "v"
    :space-evenly false
    :spacing 8
    :class "system-menu-container"
    (centerbox
      ;;:space-evenly false
      (box
        :space-evenly false
        (back_button)
        (label
          :text "Wi-Fi"
          :height 40
          :halign "start"
          :class "sub-menu-label"
          :space-evenly false
        )
      )
      ;; dummy label
      (label
        :text "" 
      )
      (box
        :halign "end"
        :space-evenly false
        :spacing 8
        (wifi)
        (label
          :class "wifi-ssid"
          :height 40
          :halign "end"
          :text "${wifi.ssid}" 
        )
      )
    )
    (box
      :height 2 
      :class "horizontal-line"
    )
    (wifi_list)
  )
)
