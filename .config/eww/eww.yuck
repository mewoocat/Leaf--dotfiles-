

;; Dot
(defwidget dot []
  (button
    :class "con"
    "Ó¥â"
    )
  )


;; Launcher button

(defwidget launcher []
  (button
    :class "launcher"
    ;;:timeout 1
    :onclick "rofi -show drun && sleep 1"
    "Óûì";;ÔÄ®ÓïªÓîú"ùÑûÓîú"
    )
  )

;; Workspaces

(deflisten workspace "./scripts/workspaces_f")
(defwidget workspaces_f []
  (eventbox
		:onscroll "echo {} | sed -e \"s/up/-1/g\" -e \"s/down/+1/g\" | xargs hyprctl dispatch workspace"
		(box
			:class "workspaces"
			:spacing 0
            ;;:height 100

		  (for ws in workspace
		    (button

            ;;:vexpand "true"
                    ;;:valign "start" 
					:onclick "hyprctl dispatch workspace ${ws.number}"
					:class "ws-icon ${ws.color == "occupied" ? "occupied" : "empty"} ${ws.color == "current" ? "current" : ""}"
                    ;; comment the next line out and change style in scss / this also allows for hover color change
			      	;;:style "color: ${ws.color};"
					;;:tooltip {ws.tooltip}
                    (label
					  :text "Óè∫"
                      :yalign 0.6  ;; fix for empty dots wrong valign?
                     )
                    )))))

;; ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"


;; Battery

(defwidget battery []
    (label
        :text "${EWW_BATTERY.BAT0.capacity}%"
    )
)

;; Time

(defpoll time 
    :interval "10s"
    "date '+%B %e   %l:%M %P'"
)

(defwidget time []
    (label
      :text "${time}"
    )
)

;; Volume

(defpoll volume 
  :interval "1s"
  "scripts/volume.sh"
)
(deflisten volumeL "./scripts/checkVolume.sh")

;; Temperature
(defpoll temp
    :interval "2s"
    "scripts/getTemp.sh"
)

;; Network
(defpoll wifi
    :interval "2s"
    "scripts/network.sh"
)

(defpoll battery
    :interval "1s"
    "scripts/battery.sh"
)

(defpoll memory
  :interval "1s"
  "scripts/mem.sh"
)

(defpoll weather_info
  :interval "10s"
  "scripts/weather.sh"
)

(defpoll user
  :interval "24h"
  "echo $USER"
)






(defwidget weather []
  (label
    :class "weather"
    :text "${weather_info}"
  )
)

(defwidget sprite []
  (image
    :path "/home/ghost/Downloads/shinx_28px.gif"
    :image-width 20
    :image-height 20
  )
)

(defwidget cpu []
  (label
    :text "Ó§â ${temp}¬∞C | ${round(EWW_CPU.avg, 0)}%"
    :class "icon"
    ;;:halign "end"       ;; Use this to fix dumbass spacing issue
    :width 0
  )
) 

(defwidget cpu_temp []
  (label
    :text "Ó§â ${temp}¬∞C"
    :class "icon"
    ;;:halign "end"       ;; Use this to fix dumbass spacing issue
    :width 0
  )
)

(defwidget cpu_usage []
  (label
    :text "Ó§â ${round(EWW_CPU.avg, 0)}%"
    :class "icon"
    ;;:halign "end"       ;; Use this to fix dumbass spacing issue
    :width 0
  )
)

(defwidget memory []
  (label
    :text "Ó§ä ${memory}%"
    :class "icon"
  )
) 

(defwidget battery []
  (box
    (label
      :text "${EWW_BATTERY.BAT0.capacity}%"
    )
    (overlay
      (label
        :class "battery icon "
        :text "${battery.bg}"
      )
      (label
        :class "battery-bg icon ${battery.critical == "yes" ? "battery-critical" : ""}"
        :text "${battery.icon}"
      )
    )
  )
)


(defwidget wifi []
  (overlay
    (label
      :class "wifi wifi-bg icon"
      :text "${wifi.bg}"
      ;;:halign "end"       ;; Use this to fix dumbass spacing issue
    )
    (label
      :class "wifi icon"
      :text "${wifi.icon}"
      ;;:halign "end"       ;; Use this to fix dumbass spacing issue
    )
  )
)

(defwidget volume []
  (overlay
    (label
      :text "${volumeL.bg}"
      :class "volume-bg"
      ;;:halign "end"       ;; Use this to fix dumbass spacing issue
      :width 20
    )

    (label
      :text "${volumeL.icon}"
      :class "volume"
      ;;:halign "end"       ;; Use this to fix dumbass spacing issue
      :width 20
    )
  )
)


;; Right widgets
(defwidget right []
    (box
        :halign "end"
        :space-evenly false
      (box
        :spacing 20
        :halign "end"
        :space-evenly false
        (sprite)
        (weather)
        (cpu)
        (memory)
        (battery)
        (wifi)
        (volume)
      )
      (button
          :class "con"
          :timeout "0.15s"
          :onclick "scripts/toggleSystemMenu.sh"
          "Ó¥â"
      )
    )
)



;; class "${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"





;; Left widgets

(deflisten window :initial "..." "bash ~/.config/eww/scripts/get-window-title")
(defwidget left []
    (box 
        :halign "start"
        :space-evenly false
        (launcher)
        (workspaces_f)
        ;;(workspaces_test :halign "center" :vexpand true :hexpand false :orientation "h")
        (label 
          :limit-width 30
          :class "window-name"
          :text "${window}")
    )
)

;; Center widgets

(defwidget center []
    (box
        :halign "center"
        (time)
    )
)




;; Bar

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "101%"
                      :height "2%"
                      :anchor "top center")
  :exclusive true
     
	(centerbox :class "container" ;;:space-evenly "false"
        :orientation "h"
		(left)
        (center)	
        (right)
    )
)

(defwindow bar_external
  :monitor 1
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "101%"
                      :height "2%"
                      :anchor "top center")
  :exclusive true
     
	(centerbox :class "container" ;;:space-evenly "false"
        :orientation "h"
		(left)
        (center)	
        (right)
    )
)

;; Calendar

(defwindow calendar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "20%"
                      :height "20%"
                      :anchor "top center")
  (calendar
    :class "calendar"
  )

)

(defpoll brightness 
  :interval "200ms"
  "light -G"
)

;;(defpoll get_theme_light :interval "200ms" "cat theme_light")

(defvar power_reveal false)
(defvar night_light false)
(defvar theme_light false)

;; System menu

(defwidget menu_button []
  (eventbox 
    :class "menu-button"
    ;;name
    (children)
  )
)

;; Module imports
(include "modules/network.yuck")
(include "modules/bluetooth.yuck")
(include "modules/nightlight.yuck")
(include "modules/theme.yuck")
(include "modules/volume.yuck")
(include "modules/brightness.yuck")
(include "modules/system_stats.yuck")
(include "modules/battery.yuck")

(defwindow system_menu
  :monitor 0
  :windowtype "normal"
  :geometry (geometry :x "1%"
                      :y "1%"
                      :width "20%"
                      :height "0%"
                      :anchor "top right")
  (box
    :class "system-menu-container"
    :orientation "v"
    :spacing 20
    :space-evenly false ;; Affects size of all child elements
    ;; Sliders
    (system_stats)
    (battery_stats)
    (box
      :class "menu-widget sliders"
      :orientation "v"
      :spacing 20
      (volume_slider)
      (brightness_slider)
    )
    ;; Menu button row 1
    (box
      :orientation "h"
      :spacing 34
      (network_button)
      (bluetooth_button)
    )

    ;; Menu buttons row 2
    (box
      :orientation "h"
      :spacing 34
      (nightlight_button)
      (theme_button)
    )

    ;; Bottom row
    (box
      :space-evenly true
      :class "menu-widget"
      :orientation "h"
      (box
        :class "pfp"
        :width 60
        :height 60
      )
      (label
        :text "${user}" 
      )
      (eventbox
        :onhover "eww update power_reveal=true"
        :onhoverlost "eww update power_reveal=false"
        "ababa"
      )
      ;; could create toggle with "eww state" to get variable and then run a script to change value
      (revealer
        :reveal {power_reveal}
        :transition "slideleft"
        :duration "0ms"
        (eventbox
          :class "power button"
          :halign "end"
          :cursor "pointer"
          ;;:width 20
          ;;:height 20
          "‚èª"
        )
      )
      (eventbox
        :class "power button"
        :halign "end"
        :cursor "pointer"
        ;;:width 20
        ;;:height 20
        "‚èª"
      )
    )
  )
)

